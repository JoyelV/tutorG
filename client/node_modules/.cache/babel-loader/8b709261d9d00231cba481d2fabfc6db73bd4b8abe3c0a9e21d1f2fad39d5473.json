{"ast":null,"code":"import * as jwt_decode from 'jwt-decode';\nexport const getUserIdFromToken = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    try {\n      const decoded = jwt_decode(token);\n      return decoded.userId; // Assuming the userId is stored under 'userId' key in the token payload\n    } catch (error) {\n      console.error('Error decoding token:', error);\n    }\n  }\n  return null; // Return null if no token exists or it cannot be decoded\n};","map":{"version":3,"names":["jwt_decode","getUserIdFromToken","token","localStorage","getItem","decoded","userId","error","console"],"sources":["B:/WEEKS/Week 23_Project 1st week/client/src/utils/tokenUtils.ts"],"sourcesContent":["import * as jwt_decode from 'jwt-decode';\r\n\r\nexport const getUserIdFromToken = (): string | null => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n        try {\r\n            const decoded: any = jwt_decode(token);\r\n            return decoded.userId;  // Assuming the userId is stored under 'userId' key in the token payload\r\n        } catch (error) {\r\n            console.error('Error decoding token:', error);\r\n        }\r\n    }\r\n    return null; // Return null if no token exists or it cannot be decoded\r\n};\r\n"],"mappings":"AAAA,OAAO,KAAKA,UAAU,MAAM,YAAY;AAExC,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAqB;EACnD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACP,IAAI;MACA,MAAMG,OAAY,GAAGL,UAAU,CAACE,KAAK,CAAC;MACtC,OAAOG,OAAO,CAACC,MAAM,CAAC,CAAE;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ;EACA,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}